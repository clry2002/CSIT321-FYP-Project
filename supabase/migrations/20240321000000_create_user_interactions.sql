-- Create userInteractions table
CREATE TABLE IF NOT EXISTS public.userInteractions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uaid UUID NOT NULL REFERENCES public.user_account(user_id) ON DELETE CASCADE,
    gid INTEGER NOT NULL REFERENCES public.temp_genre(gid) ON DELETE CASCADE,
    score INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(uaid, gid)
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_user_interactions_uaid ON public.userInteractions(uaid);
CREATE INDEX IF NOT EXISTS idx_user_interactions_gid ON public.userInteractions(gid);

-- Set up Row Level Security (RLS)
ALTER TABLE public.userInteractions ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own interactions"
    ON public.userInteractions FOR SELECT
    USING (uaid = auth.uid());

CREATE POLICY "Users can insert their own interactions"
    ON public.userInteractions FOR INSERT
    WITH CHECK (uaid = auth.uid());

CREATE POLICY "Users can update their own interactions"
    ON public.userInteractions FOR UPDATE
    USING (uaid = auth.uid());

-- Create function to handle updated_at
CREATE OR REPLACE FUNCTION public.handle_user_interactions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updated_at
CREATE TRIGGER handle_user_interactions_updated_at
    BEFORE UPDATE ON public.userInteractions
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_user_interactions_updated_at(); 